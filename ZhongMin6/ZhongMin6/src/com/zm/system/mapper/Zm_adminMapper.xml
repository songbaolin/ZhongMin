<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==================代理方式=================
由mapper标签开始，由/mapper结束，可以把它想成一个空间，是映射文件
属性namespace：空间名，主要在代理中使用。这个namespace是唯一的。
这里把mapper标签和接口联系在一起了，namespace=写接口路径，映射文件要和接口在同一目录下
 -->
<mapper namespace="com.zm.system.mapper.Zm_adminMapper">
	<!-- =============映射关系标签=============
	属性type:写po类的包名类名，由于之前定义了po类的别名，这里就写这个别名
	属性id：是这个映射标签的唯一标识
	id标签是查询结果集中的唯一标识
	属性column：查询出来的列名
	属性property：是po类里所指定的列名
	通常会在原列名后面加下划线，这是固定的，这里就是id后面_
	 -->
	<resultMap type="com.zm.system.po.Zm_admin" id="userinfoMap">
		<result column="zm_id" property="zm_id"/>
		<result column="zm_name" property="zm_name"/>
		<result column="zm_password" property="zm_password"/>
		<result column="zm_city" property="zm_city"/>
		<result column="zm_ptoto" property="zm_ptoto"/>
		
	</resultMap>
	<!-- ==================定义sql片段==============
	sql:是sql片段标签
	属性id是该片段的唯一标识
	 -->
	<sql id="zd">
		zm_id,zm_name,zm_password,zm_city,zm_ptoto
	</sql>
	<!-- 增删改查标签里的id:一定要和接口里对应的方法名一致，
		 resultMap输出类型里写映射标签里的id 
		 parameterType：输入类型，规范输入数据类型，指明查询时使用的参数类型-->
	<!-- 验证登录    ok  -->
	<select id="login" resultMap="userinfoMap" parameterType="com.zm.system.po.Zm_admin">	
		<!-- 用include标签引入sql片段，refid写定义sql片段的id，where标签不要写在片段里 -->
		select <include refid="zd"></include> from zm_admin
		<where>			
				zm_name=#{zm_name} and zm_password=#{zm_password}
		</where>
	</select>
	<!-- 查询管理员的总记录数 -->
	<select  id="getAllRecord" resultType="int">
		select count(*) from zm_admin
	
	</select>	
	<!-- 分页查询管理员信息 -->  
	<select id="selectAdminByfy" resultMap="userinfoMap">  
	 	select <include refid="zd"></include> from zm_admin 
	 		limit #{start},#{pageSize}  
	</select>  
	
	
	
	<!-- 根据传进来的城市名 查询是否有该城市的管理员 -->
	<select id="selectAdminBycname" resultMap="userinfoMap" resultType="String">
		select * from zm_admin where zm_city  LIKE '%${city}%'
	
	</select>
	
	
	<!-- 查询管理员列表  ok -->  
	<select id="userList" resultMap="userinfoMap" parameterType="com.zm.system.po.Zm_admin">
		<!-- 用include标签引入sql片段，refid写定义sql片段的id，where标签不要写在片段里 -->
		select <include refid="zd"></include> from zm_admin
	</select>
	
	
	<!-- 修改管理员密码 -->
	 <update id="update" parameterType="com.zm.system.po.Zm_admin">
	 	update zm_admin set 
	 	zm_password=#{zm_password}
	 	where zm_id=#{zm_id} 
	 </update>
	 
	<!-- 添加管理员信息 -->
	<insert id="insert" parameterType="com.zm.system.po.Zm_admin">
		insert into zm_admin(<include refid="zd"></include>) 
		values(#{zm_id},#{zm_name},#{zm_password},#{zm_city})
	</insert>
	<!-- 后台按照用户名查询管理员-->
	<select id="select" resultMap="userinfoMap" parameterType="String">
		<!-- 用include标签引入sql片段，refid写定义sql片段的id，where标签不要写在片段里 -->
		select <include refid="zd"></include> from zm_admin where zm_name=#{username}
	</select>
	    <delete id="delete" parameterType="int">
	     delete  from zm_admin where  zm_id=#{zm_id}
	    </delete>
	    
	    <!-- 更新图片 -->
    <update id="updateUserPhoto" parameterType="com.zm.system.po.Zm_admin">  
        UPDATE zm_admin set zm_id = #{zm_id}, zm_photo = #{zm_photo,jdbcType=BLOB} <!-- 这里试了，如果不加jdbcType=BLOB 会出错，虽然不是很理解，但也照做了 --> 
        WHERE zm_id = #{zm_id}
    </update>  
    <!-- 获取图片 -->
    <select id="selectUserPhoto" parameterType="String" resultType="Map">  
            SELECT  zm_id as zm_id, zm_photo as zm_photo from zm_admin 
            WHERE   zm_id=#{zm_id}  
    </select>
        <!-- 获取图片 -->
    <select id="findUserById" parameterType="com.zm.system.po.Zm_admin" resultType="Map">  
             select * from zm_admin where zm_id=#{zm_id};
    </select>
</mapper>




